
# JEDEN PROMPT DLA JETBRAINS AI ASSISTANT — GENERACJA CAŁEGO PROJEKTU

## Kontekst
Pisz po polsku. Generuj **kompletny, uruchamialny** projekt.
Środowisko: **Ubuntu**, **Docker Engine**.
Stack: **PHP 8.3**, **Symfony 6.4 LTS**, **PostgreSQL 16**, **nginx + php-fpm**, **Twig + Bootstrap 5**, **EasyAdmin** (CRUD).
Aplikacja: lokalna (bez logowania), do zapisywania **paragonów** i raportowania wydatków.
Waluta: **PLN**, kwoty w **groszach (int)**. Ilości: **DECIMAL**.
Tydzień liczony od **poniedziałku**.
Dwa gospodarstwa: **Dom A**, **Dom B**.

## Wymagania funkcjonalne
1) **Paragony**
   - Nagłówek: gospodarstwo (A/B), data zakupu, sklep (słownik), uwagi (tekst, opcjonalnie), suma paragonu (wyliczana z pozycji i cache’owana w nagłówku).
   - Pozycje: produkt (słownik), ilość (DECIMAL), jednostka (tekst, opcjonalnie), cena jednostkowa (grosze, BIGINT), wartość pozycji (grosze, BIGINT).
   - Suma paragonu liczona automatycznie z pozycji (przy zapisie i edycji).

2) **Słowniki (płaskie)**
   - Sklepy (unikalna nazwa).
   - Kategorie (np. Jedzenie, Chemia, Apteka, Lekarz — płaskie).
   - Produkty (unikalna nazwa) przypisane do kategorii.
   - **Quick-add inline** w formularzach (jeśli nie ma sklepu/produktu, możliwość dodania “w locie” bez opuszczania formularza).

3) **Raporty (MVP)**
   - Filtry: zakres dat, gospodarstwo, sklep, kategoria, produkt.
   - Widoki: suma wydatków w okresie; wg kategorii; wg sklepów; wg produktów (TOP N – np. 10); porównanie **Dom A** vs **Dom B** w danym zakresie.
   - Przygotuj warstwę raportową tak, by **łatwo dodawać nowe raporty** (np. widok `mv_spend`/normalny widok SQL i serwis agregujący).
   - **Nie implementuj na razie** porównań tydzień↔tydzień ani miesiąc↔miesiąc – zostaw rozsądne punkty rozszerzeń/TODO.

4) **Brak logowania** (aplikacja tylko dla mnie, lokalnie).

5) **Import CSV** – na przyszłość. Teraz nie implementuj, ale zostaw punkt rozszerzeń (interfejs/serwis, TODO).

## Wymagania niefunkcjonalne
- Kraj/locale: `pl_PL`, strefa czasu `Europe/Warsaw`.
- Formatowanie kwot: PLN; w bazie **grosze (BIGINT)**, w UI ładne formatowanie (z przecinkiem i “zł”).
- Wydajność raportów: indeksy na kluczowych kolumnach; raporty oparte o widok z danymi pozycji paragonów (fakt) + wymiary (czas, gospodarstwo, sklep, kategoria, produkt).
- Kod produkcyjny: bez pseudokodu; ma się uruchamiać w Dockerze.

## Model danych (PostgreSQL)
Tabele i kluczowe pola (nazwy i typy są wiążące):
- `household` — {`id` UUID/ULID, `name` TEXT (unikalne)} — rekordy startowe: “Dom A”, “Dom B” (możesz dodać w migracji lub Command — ale **bez** seedów testowych).
- `store` — {`id`, `name` TEXT unique}.
- `category` — {`id`, `name` TEXT unique}.
- `product` — {`id`, `name` TEXT unique, `category_id` FK}.
- `receipt` — {`id`, `household_id` FK, `store_id` FK, `purchase_date` DATE, `total_amount_grosze` BIGINT, `notes` TEXT NULL}.
- `receipt_line` — {`id`, `receipt_id` FK, `product_id` FK, `quantity` DECIMAL(10,3), `unit` TEXT NULL, `unit_price_grosze` BIGINT, `line_total_grosze` BIGINT}.

Indeksy (obowiązkowo):
- `receipt (purchase_date)`, `(household_id)`, `(store_id)`.
- `receipt_line (product_id)`, `(receipt_id)`.
- `product (category_id)`.

Warstwa raportowa:
- Widok SQL `report_spend` z kolumnami: `purchase_date`, `household_id`, `store_id`, `category_id`, `product_id`, `quantity`, `amount_grosze` (alias `line_total_grosze`). Raporty to agregacje GROUP BY na tym widoku.
- Przygotuj usługę Symfony do agregacji z możliwością łatwego dodawania nowych raportów.

## Architektura i narzędzia
- **Docker Compose**: usługi `nginx`, `php-fpm` (PHP 8.3), `postgres` (16). **Bez pgAdmina**.
- Porty: HTTP `8080`, Postgres `5432`.
- Wspólna sieć; wolumeny na dane Postgresa i cache/var projektu.
- Opcjonalnie (komentarze/TODO): Xdebug (port 9003), mapping `/app`.
- **Composer** i Symfony CLI w kontenerze PHP.
- **EasyAdmin** do szybkiego CRUD dla słowników i paragonów (lista, dodawanie/edycja, filtry).

## UI
- **Twig + Bootstrap 5**.
- Formularz paragonu: nagłówek + dynamiczne pozycje (dodawanie/usuwanie wierszy), autocomplete + quick-add dla sklepu i produktu.
- Dashboard raportowy: wykresy/wykazy tabelaryczne (na start tabele; wykresy można dodać później).
- Całość po polsku.

## Wymagany output (“jak masz odpowiedzieć”)
**Podaj kompletne pliki z nagłówkami ścieżek** i kodem, tak bym mógł je skopiować do projektu 1:1. Kolejność:
1) **Struktura katalogów** (drzewo).
2) `docker-compose.yml` + `docker/php/Dockerfile` + `docker/nginx/default.conf` (+ ew. `.dockerignore`).
3) `Makefile` z komendami: `make up`, `down`, `logs`, `bash`, `composer`, `console`, `migrate`, `fixtures` (zostaw pusty cel lub TODO), `tests`.
4) Pliki projektu Symfony (wygeneruj jak dla świeżego projektu): `composer.json`, `symfony.lock` (opcjonalnie), podstawowe katalogi `config/`, `src/`, `templates/`, `public/`, `migrations/`, `tests/`.
5) **Doctrine Entities**: `Household`, `Store`, `Category`, `Product`, `Receipt`, `ReceiptLine` (+ relacje, walidacje).
6) **Migrations** tworzące powyższe tabele, indeksy, widok `report_spend` oraz wstawiające rekordy “Dom A”, “Dom B` (bez innych seedów).
7) **Formy i kontrolery** do:
   - CRUD słowników (EasyAdmin konfig).
   - Dodawania/edycji paragonu z pozycjami (+ liczenie sumy).
   - Dashboard raportów z filtrami i agregacjami z widoku `report_spend`.
8) **Templates Twig** dla: lista/dodaj paragon, słowniki, dashboard raportowy.
9) **Serwis raportowy** (np. `App\Service\ReportService`) z metodami: `sumByPeriod`, `byCategory`, `byStore`, `byProductTop`, `compareHouseholds` – implementacja na bazie `report_spend`.
10) **Konfiguracja**: locale, timezone, money formatter (PLN), parametry aplikacji.
11) **Testy** (prosty smoke test kontrolera raportów / integracyjny na pustej bazie).
12) **README.md** z instrukcjami uruchomienia: Docker/Compose, komendy Make, pierwsze kroki (migracje), dostęp na `http://localhost:8080`.
13) **TODO** w kodzie/README: CSV import (interfejs/serwis), porównania week-over-week/month-over-month, Xdebug (komentarze).

**Ważne zasady generacji:**
- Kod ma być uruchamialny w Dockerze. Unikaj skrótów typu “tu wstaw konfigurację” – podaj pełne pliki.
- Ścieżki plików w nagłówkach w formacie: \`path/to/file.ext\` przed blokiem kodu.
- Używaj stabilnych wersji paczek kompatybilnych z Symfony 6.4.
- Brak logowania i użytkowników.
- Nie dodawaj przykładów danych poza “Dom A”/“Dom B”.

## Po wygenerowaniu proszę dodać sekcję “Jak uruchomić”
- Kroki: `make up`, `make composer install`, `make console doctrine:migrations:migrate`, wejście na `http://localhost:8080`.
- Instrukcja konfiguracji PHPStorm (skrót): Interpreter z Dockera, path mapping `/app`, opcjonalnie Xdebug (9003).

## Dodatkowe wskazówki (dla AI)
- Jeśli jakaś decyzja jest niejednoznaczna, przyjmij rozsądne domyślne i kontynuuj (bez pytań).
- Projekt ma być mały, ale czytelny i rozszerzalny (moduł raportowy).
- Pisz po polsku.

@pdLQbKj64y~'p9s
